{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Calibri;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\vieww19320\viewh15500\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\sa200

\f0\b\fs22 \cf0 Part II: A Java map class\

\b0 Complete the implementation of MyMap.java. Conventionally, we say a map is \
\'93from 
\b keys 
\b0 to 
\b values
\b0 \'94  in mathematical language, it is a function from a domain of keys to a range of values.   \
The particular map you will implement is from Strings to integers.\
At any point in time, a map represents a set of (key, value) pairs.  The keys are distinct, but \
the values may be duplicated.  Suppose for example, a user of this class wants to capture \
people and their respective ages; the set of (key, value) pairs might look like this:\
\{("Larry", 29), ("Mary", 62), ("Alice", 29), ("Phil", 91)\}\
The class methods allow a user to add, remove, update and query information in the map.  \
Read the method banner comments for details.  Again, nothing too surprising.\

\b REQUIREMENTS:\

\f1\b0 \uc0\u9679 
\f0  Unbounded capacity:  the map must be able to grow to be as large as the user wants.\

\f1 \uc0\u9679 
\f0  Unlike Part I, there are no runtime requirements.  There are many ways in which the \
data can be organized in support of the required operations.  This organization is \
completely up to you.  However, when you are done, you might reflect on alternative \
approaches you may have taken.\

\f1 \uc0\u9679 
\f0  
\b REMEMBER:  only basic Java objects  arrays, Strings, etc. are fair game.  
\b0 \

\f1 \uc0\u9679 
\f0  A nontrivial driver/tester program exercising your class implementation must also be \
\
included.\
}