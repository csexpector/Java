{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa240

\f0\fs38 \cf0 \expnd0\expndtw0\kerning0
Sorting 
\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240

\fs32 \cf0 \expnd0\expndtw0\kerning0
1. Implement Quicksort and compare its running time to MergeSort and Selection Sort using the ideas from the last lab. 
\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240

\fs38 \cf0 \expnd0\expndtw0\kerning0
Doubly Linked Lists 
\fs24 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320
\ls1\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
It is easier to implement a delete() method in a linked list that is linked both forward and backward. In other words, the ListNode class includes a previous reference as well as a next reference. The linked list itself maintains a head pointing to the first element in the list and a tail reference pointing to the other end of the list. Such a linked list is called a doubly linked list. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Implement a doubly linked list. Include the addToFront and toString methods that we worked on in class. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
Add a method to your doubly linked list class to implement Selection Sort. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
Add a method to your doubly linked list class to implement Quicksort. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
Compare the running times of Selection Sort and Quicksort on a linked list with the running times for those algorithms on an array. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
Implement findNode method that returns the node containing the given data. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
Write a delete method that first searches for a node containing the given data and deletes the node containing the data if it finds the data in the list. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8.	}\expnd0\expndtw0\kerning0
Add an Iterator to your doubly linked list class. Recall that an Iterator must include the following three methods: \uc0\u8232 \'95 hasNext() \'96 returns true if there is something that has not \u8232 \'95 next() \'96 returns the next available object in the list. \u8232 \'95 remove() \'96 removes the object that was returned by the last call to next. Note that remove should be called if next has not yet been called. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9.	}\expnd0\expndtw0\kerning0
Add an iterator that traverses the list in reverse order. }